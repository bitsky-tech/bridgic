# GitHub Pages Auto-Deployment Workflow
# This workflow uses uv for Python dependency management and automatically builds and deploys MkDocs documentation to GitHub Pages
# Reference documentation:
# - GitHub Actions: https://docs.github.com/en/actions
# - uv package manager: https://docs.astral.sh/uv/
# - MkDocs: https://www.mkdocs.org/
# - GitHub Pages: https://docs.github.com/en/pages

name: GitHub Pages

# Trigger conditions: runs when pushing to main branch or creating Pull Request
on:
  push:
    tags:
      - v*  # Only triggers deployment when pushing to main branch

jobs:
  deploy:
    # Use Ubuntu 22.04 as the runtime environment
    runs-on: ubuntu-22.04
    
    # Set permissions: need write permissions to deploy to GitHub Pages
    permissions:
      contents: write  # Allow writing to repository content
      pages: write     # Allow writing to Pages
      id-token: write  # Allow writing ID token (for authentication)
    
    # Concurrency control: ensures multiple workflows on the same branch do not run simultaneously
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true  # Cancel running identical workflows
    
    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch complete history, some tools may require this

      # Step 2: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'  # Keep consistent with requirements in pyproject.toml

      # Step 3: Install uv package manager
      # uv is an extremely fast Python package manager written in Rust
      # Compared to pip, uv has significant advantages in dependency resolution and installation speed
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"  # Use the latest version of uv
          enable-cache: true  # Enable caching to speed up subsequent builds

      # Step 4: Cache uv dependencies
      # Caching can significantly reduce build time, especially for large projects
      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      # Step 5: Install project dependencies
      # Use uv to install dependencies defined in pyproject.toml
      # uv automatically handles dependency resolution and virtual environment management
      - name: Install dependencies with uv
        run: |
          cd docs  # Enter docs directory, as pyproject.toml and uv.lock are in this directory
          uv sync  # Sync dependencies, equivalent to pip install + virtual environment management

      # Step 6: Configure Git for mike to push to gh-pages
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # Step 7: Build docs and deploy version with mike
      - name: Build and deploy docs with mike
        run: |
          cd docs
          # Generate mkdocs.yml, then let mike handle building & deployment
          make gen-mkdocs-yml
          make build-doc-version VERSION=${{ github.ref_name }}
      
      # Step 8: Ensure CNAME exists on gh-pages branch
      - name: Ensure CNAME on gh-pages
        run: |
          set -e
          DOMAIN=$(cat docs/CNAME 2>/dev/null)
          git fetch origin gh-pages || true
          git switch gh-pages
          echo "$DOMAIN" > CNAME
          git add CNAME
          if git diff --cached --quiet; then
            echo "CNAME unchanged"
          else
            git commit -m "chore: ensure CNAME for GitHub Pages"
            git push origin gh-pages
          fi